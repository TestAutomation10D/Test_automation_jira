name: Run workflow for PR
on:
  pull_request:
    branches:
      - master
    types:
      - closed
jobs:
  Run_Selected_Tests:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: SET Pull Request and ENV Information
        run: |
          echo GIT_PR_NUMBER="${{ github.event.number }}" >> $GITHUB_ENV
          echo GIT_REPOSITORY_NAME="${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo GIT_ORG_NAME="${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
          echo TC_SANITY_EXECUTION=$(echo ${{ secrets.TC_SANITY_EXECUTION }}) >> $GITHUB_ENV
          echo PREFIX_TICKET_VALUE=$(echo ${{ secrets.PREFIX_TICKET_VALUE }}) >> $GITHUB_ENV
          echo AUTH_TOKEN=$(echo ${{ secrets.AUTH_TOKEN }}) >> $GITHUB_ENV
          echo FAIL_STATUS_TRANSITION=$(echo ${{secrets.FAIL_STATUS_TRANSITION }}) >> $GITHUB_ENV
          echo JIRA_CONDITION=$(echo ${{ secrets.JIRA_CONDITION }}) >> $GITHUB_ENV
          echo JIRA_DOMAIN=$(echo ${{ secrets.JIRA_DOMAIN }}) >> $GITHUB_ENV
          echo JIRA_GITHUB_TOOL=$(echo ${{ secrets.JIRA_GITHUB_TOOL }}) >> $GITHUB_ENV
          echo PASS_STATUS_TRANSITION=$(echo ${{ secrets.PASS_STATUS_TRANSITION }}) >> $GITHUB_ENV
          echo TC_FUNCTIONAL_EXECUTION=$(echo ${{ secrets.TC_FUNCTIONAL_EXECUTION }}) >> $GITHUB_ENV
          echo TC_INTEGRATION_EXECUTION=$(echo ${{ secrets.TC_INTEGRATION_EXECUTION }}) >> $GITHUB_ENV


      - name: Execute Sanity Cases
        if: ${{ always() && env.TC_SANITY_EXECUTION == 'True' }}
        run: |
          echo "Sanity cases"
          echo $GIT_REPOSITORY_NAME
          echo $GIT_ORG_NAME
          echo $BRANCH_NAME
          echo $GIT_PR_NUMBER
          REPORT_NAME="SANITY REPORT" pytest ./test_cases/ui/test_report_extract.py
          echo $REPORT_NAME

      - name: Execute Functional Cases
        if: ${{ always() && env.TC_FUNCTIONAL_EXECUTION == 'True'}}
        run: |
          echo "Functional cases"
          echo $GIT_REPOSITORY_NAME
          echo $GIT_ORG_NAME
          echo $BRANCH_NAME
          echo $GIT_PR_NUMBER
          echo $JIRA_TICKET_ID
          echo $JIRA_ISSUE_ID
          echo $REPORT_STATUS
          REPORT_NAME="FUNCTIONAL REPORT" pytest ./test_cases/ui/test_report_extract.py
          echo $REPORT_NAME
      
      - name: Execute Integration Cases
        if: ${{ always() && env.TC_INTEGRATION_EXECUTION == 'True'}}
        run: |
          echo "Integration cases"
          echo $GIT_REPOSITORY_NAME
          echo $GIT_ORG_NAME
          echo $BRANCH_NAME
          echo $GIT_PR_NUMBER
          echo $JIRA_TICKET_ID
          echo $JIRA_ISSUE_ID
          echo $REPORT_STATUS
          REPORT_NAME="INTEGRATION REPORT" pytest ./test_cases/ui/test_report_extract.py
          echo $REPORT_NAME

      - name: Send results to jira
        if: ${{ always() && env.JIRA_CONDITION == 'True'}}
        run: pytest --noconftest -s -v ./test_cases/send_results_jira.py
